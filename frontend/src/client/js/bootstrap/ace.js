import Ace from 'ace-builds/src-noconflict/ace';
import 'ace-builds/webpack-resolver';


Ace.tools = Object.freeze({
  idToMode: (id) => `ace/mode/${id}`,
  idToTheme: (id) => `ace/theme/${id}`,
});

Ace.loadMode = (editor, id) => {
  if (Ace.bootstrap.modes.some((mode) => mode.id === id)) {
    editor.session.setMode(Ace.tools.idToMode(id));
  }
};
Ace.loadTheme = (editor, id) => {
  if (Ace.bootstrap.themes.includes(id)) {
    editor.setTheme(Ace.tools.idToTheme(id));
  }
};

Ace.bootstrap = {
  modes: [
    {id: 'abap', mimetype: '', name: 'ABAP'},
    {id: 'abc', mimetype: '', name: 'ABC'},
    {id: 'actionscript', extensions: ['as'], mimetype: 'text/x-actionscript', name: 'ActionScript'},
    {id: 'ada', extensions: ['adb', 'ads'], mimetype: '', name: 'Ada'},
    {id: 'apache_conf', mimetype: ''},
    {id: 'apex', extensions: ['cls'], mimetype: 'text/x-apex', name: 'Apex'},
    {id: 'applescript', mimetype: ''},
    {id: 'asciidoc', mimetype: ''},
    {id: 'asl', mimetype: ''},
    {id: 'assembly_x86', mimetype: ''},
    {id: 'autohotkey', mimetype: ''},
    {id: 'batchfile', extensions: ['bat'], mimetype: 'text/plain', name: 'Batch'},
    {id: 'bro', mimetype: ''},
    {id: 'c9search', mimetype: ''},
    {id: 'c_cpp', extensions: ['c', 'c++'], mimetype: 'text/x-c', name: 'C/C++'},
    {id: 'cirru', mimetype: ''},
    {id: 'clojure', extensions: ['clj'], mimetype: 'text/x-clojure', name: 'Clojure'},
    {id: 'cobol', extensions: ['cob'], mimetype: 'text/x-cobol', name: 'Cobol'},
    {id: 'coffee', extensions: ['coffee'], mimetype: 'text/x-coffeescript', name: 'CoffeeScript'},
    {id: 'coldfusion', mimetype: ''},
    {id: 'csharp', extensions: ['cs'], mimetype: 'text/x-csharp', name: 'C#'},
    {id: 'csound_document', mimetype: ''},
    {id: 'csound_orchestra', mimetype: ''},
    {id: 'csound_score', mimetype: ''},
    {id: 'csp', mimetype: ''},
    {id: 'css', extensions: ['css'], mimetype: 'text/css', name: 'CSS'},
    {id: 'curly', mimetype: ''},
    {id: 'd', extensions: ['d'], mimetype: 'text/x-d', name: 'D'},
    {id: 'dart', extensions: ['dart'], mimetype: 'text/x-dart', name: 'Dart'},
    {id: 'diff', extensions: ['patch'], mimetype: 'text/x-diff', name: 'Diff'},
    {id: 'django', extensions: ['django'], mimetype: 'text/x-django', name: 'Django'},
    {id: 'dockerfile', mimetype: 'text/x-dockerfile', name: 'Dockerfile'},
    {id: 'dot', mimetype: ''},
    {id: 'drools', mimetype: ''},
    {id: 'edifact', mimetype: ''},
    {id: 'eiffel', extensions: ['e'], mimetype: 'text/x-eiffel', name: 'Eiffel'},
    {id: 'ejs', extensions: ['ejs'], mimetype: 'application/x-ejs', name: 'Ejs'},
    {id: 'elixir', mimetype: ''},
    {id: 'elm', extensions: ['elm'], mimetype: 'text/x-elm', name: 'Elm'},
    {id: 'erlang', extensions: ['erl'], mimetype: 'text/x-erlang', name: 'Erlang'},
    {id: 'forth', extensions: ['forth'], mimetype: 'text/x-forth', name: 'Forth'},
    {id: 'fortran', extensions: ['f'], mimetype: 'text/x-fortran', name: 'Fortran'},
    {id: 'fsharp', extensions: ['fs'], mimetype: 'text/x-fsharp', name: 'FSharp'},
    {id: 'fsl', mimetype: ''},
    {id: 'ftl', mimetype: ''},
    {id: 'gcode', mimetype: ''},
    {id: 'gherkin', mimetype: ''},
    {id: 'gitignore', mimetype: ''},
    {id: 'glsl', mimetype: ''},
    {id: 'gobstones', mimetype: ''},
    {id: 'golang', extensions: ['go'], mimetype: 'text/x-go', name: 'GoLang'},
    {id: 'graphqlschema', mimetype: ''},
    {id: 'groovy', mimetype: ''},
    {id: 'haml', mimetype: ''},
    {id: 'handlebars', extensions: ['hbs'], mimetype: 'text/x-handlebars-template', name: 'Handlebars'},
    {id: 'haskell', extensions: ['hs'], mimetype: 'text/x-haskell', name: 'Haskell'},
    {id: 'haskell_cabal', mimetype: ''},
    {id: 'haxe', extensions: ['hx'], mimetype: 'text/x-haxe', name: 'Haxe'},
    {id: 'hjson', mimetype: ''},
    {id: 'html', extensions: ['html'], mimetype: 'text/html', name: 'HTML'},
    {id: 'html_elixir', mimetype: ''},
    {id: 'html_ruby', mimetype: ''},
    {id: 'ini', extensions: ['ini'], mimetype: 'text/x-properties', name: 'ini'},
    {id: 'io', mimetype: ''},
    {id: 'jack', mimetype: ''},
    {id: 'jade', extensions: ['jade'], mimetype: 'text/jade', name: 'Jade'},
    {id: 'java', extensions: ['java'], mimetype: 'text/x-java', name: 'Java'},
    {id: 'javascript', extensions: ['js'], mimetype: 'application/javascript', name: 'JavaScript'},
    {id: 'json', extensions: ['json'], mimetype: 'application/json', name: 'JSON'},
    {id: 'jsoniq', mimetype: ''},
    {id: 'jsp', extensions: ['jsp'], mimetype: 'application/x-jsp', name: 'JSP'},
    {id: 'jssm', mimetype: ''},
    {id: 'jsx', extensions: ['jsx'], mimetype: 'text/jsx', name: 'JSX'},
    {id: 'julia', extensions: ['jl'], mimetype: 'text/x-julia', name: 'Julia'},
    {id: 'kotlin', extensions: ['kt'], mimetype: 'text/x-kotlin', name: 'Kotlin'},
    {id: 'latex', extensions: ['ltx'], mimetype: 'text/x-latex', name: 'Latex'},
    {id: 'less', extensions: ['less'], mimetype: 'text/less', name: 'LESS'},
    {id: 'liquid', mimetype: ''},
    {id: 'lisp', extensions: ['lisp'], mimetype: 'text/x-common-lisp', name: 'Lisp'},
    {id: 'livescript', extensions: ['ls'], mimetype: 'text/x-livescript', name: 'LiveScript'},
    {id: 'logiql', mimetype: ''},
    {id: 'logtalk', mimetype: ''},
    {id: 'lsl', mimetype: ''},
    {id: 'lua', extensions: ['lua'], mimetype: 'text/x-lua', name: 'LUA'},
    {id: 'luapage', mimetype: ''},
    {id: 'lucene', mimetype: ''},
    {id: 'makefile', mimetype: ''},
    {id: 'markdown', extensions: ['markdown'], mimetype: 'text/x-markdown', name: 'Markdown'},
    {id: 'mask', mimetype: ''},
    {id: 'matlab', mimetype: ''},
    {id: 'maze', mimetype: ''},
    {id: 'mel', mimetype: ''},
    {id: 'mixal', mimetype: ''},
    {id: 'mushcode', mimetype: ''},
    {id: 'mysql', extensions: ['sql'], mimetype: 'text/x-mysql', name: 'MySQL'},
    {id: 'nix', mimetype: ''},
    {id: 'nsis', extensions: ['nsh'], mimetype: 'text/x-nsis', name: 'NSIS'},
    {id: 'objectivec', extensions: ['mm'], mimetype: 'text/x-objectivec', name: 'Objective C'},
    {id: 'ocaml', extensions: ['ml'], mimetype: 'text/x-ocaml', name: 'OCAML'},
    {id: 'pascal', extensions: ['pas'], mimetype: 'text/x-pascal', name: 'Pascal'},
    {id: 'perl', extensions: ['pl'], mimetype: 'text/x-perl', name: 'Perl'},
    {id: 'pgsql', mimetype: ''},
    {id: 'php', extensions: ['php'], mimetype: 'text/x-php', name: 'PHP'},
    {id: 'php_laravel_blade', mimetype: ''},
    {id: 'pig', extensions: ['pig'], mimetype: 'text/x-pig', name: 'PIG'},
    {id: 'plain_text', extensions: ['txt'], mimetype: 'text/plain', name: 'Plain Text'},
    {id: 'powershell', extensions: ['ps1'], mimetype: 'application/x-powershell', name: 'Powershell'},
    {id: 'praat', mimetype: ''},
    {id: 'prolog', mimetype: ''},
    {id: 'properties', extensions: ['properties'], mimetype: 'text/x-properties', name: 'Properties'},
    {id: 'protobuf', extensions: ['proto'], mimetype: 'text/x-protobuf', name: 'ProtoBuf'},
    {id: 'puppet', extensions: ['pp'], mimetype: 'text/x-puppet', name: 'Puppet'},
    {id: 'python', extensions: ['py'], mimetype: 'text/x-python', name: 'Python'},
    {id: 'r', mimetype: ''},
    {id: 'razor', mimetype: ''},
    {id: 'rdoc', mimetype: ''},
    {id: 'red', extensions: ['red'], mimetype: 'text/red', name: 'Red'},
    {id: 'redshift', mimetype: ''},
    {id: 'rhtml', mimetype: ''},
    {id: 'rst', extensions: ['rst'], mimetype: 'text/x-rst', name: 'RST'},
    {id: 'ruby', extensions: ['rb'], mimetype: 'text/x-ruby', name: 'Ruby'},
    {id: 'rust', extensions: ['rs'], mimetype: 'text/x-rustsrc', name: 'Rust'},
    {id: 'sass', extensions: ['sass'], mimetype: 'text/x-sass', name: 'Sass'},
    {id: 'scad', mimetype: ''},
    {id: 'scala', extensions: ['scala'], mimetype: 'text/x-scala', name: 'Scala'},
    {id: 'scheme', extensions: ['scm'], mimetype: 'text/x-scheme', name: 'Scheme'},
    {id: 'scss', extensions: ['scss'], mimetype: 'text/x-scss', name: 'Scss'},
    {id: 'sh', extensions: ['sh'], mimetype: 'application/x-sh', name: 'sh'},
    {id: 'sjs', mimetype: ''},
    {id: 'slim', extensions: ['slim'], mimetype: 'text/x-slim', name: 'Slim'},
    {id: 'smarty', extensions: ['tpl'], mimetype: 'text/x-smarty', name: 'Smarty'},
    {id: 'snippets', mimetype: ''},
    {id: 'soy_template', extensions: ['soy'], mimetype: 'text/x-soy', name: 'Soy Template'},
    {id: 'space', mimetype: ''},
    {id: 'sparql', extensions: ['sparql'], mimetype: 'application/sparql-query', name: 'Sparql'},
    {id: 'sql', extensions: ['sql'], mimetype: 'text/x-sql', name: 'SQL'},
    {id: 'sqlserver', mimetype: ''},
    {id: 'stylus', extensions: ['stylus'], mimetype: 'text/stylus', name: 'Stylus'},
    {id: 'svg', extensions: ['svg'], mimetype: 'image/svg+xml', name: 'SVG'},
    {id: 'swift', extensions: ['swift'], mimetype: 'text/swift', name: 'Swift'},
    {id: 'tcl', extensions: ['tcl'], mimetype: 'text/x-tcl', name: 'TCL'},
    {id: 'terraform', mimetype: ''},
    {id: 'tex', mimetype: ''},
    {id: 'text', extensions: ['txt'], mimetype: 'text/plain', name: 'Plain Text'},
    {id: 'textile', extensions: ['textile'], mimetype: 'text/x-textile', name: 'Textile'},
    {id: 'toml', extensions: ['toml'], mimetype: 'text/x-toml', name: 'TOML'},
    {id: 'tsx', extensions: ['tsx'], mimetype: 'text/typescript-jsx', name: 'TypeScript JSX'},
    {id: 'turtle', extensions: ['ttl'], mimetype: 'text/turtle', name: 'Turtle'},
    {id: 'twig', extensions: ['twig'], mimetype: 'text/x-twig', name: 'Twig'},
    {id: 'typescript', extensions: ['ts'], mimetype: 'text/typescript', name: 'TypeScript'},
    {id: 'vala', mimetype: ''},
    {id: 'vbscript', extensions: ['vbs'], mimetype: 'text/vbscript', name: 'VBScript'},
    {id: 'velocity', extensions: ['vtl'], mimetype: 'text/velocity', name: 'Velocity'},
    {id: 'verilog', extensions: ['v'], mimetype: 'text/x-verilog', name: 'Verilog'},
    {id: 'vhdl', extensions: ['vhdl'], mimetype: 'text/x-vhdl', name: 'VHDL'},
    {id: 'visualforce', mimetype: ''},
    {id: 'wollok', mimetype: ''},
    {id: 'xml', extensions: ['xml'], mimetype: 'text/xml', name: 'XML'},
    {id: 'xquery', extensions: ['xquery'], mimetype: 'application/xquery', name: 'XQuery'},
    {id: 'yaml', exensions: ['yaml'], mimetype: 'text/yaml', name: 'YAML'},
  ],
  themes: [
    'ambiance',
    'chaos',
    'chrome',
    'clouds',
    'clouds_midnight',
    'cobalt',
    'crimson_editor',
    'dawn',
    'dracula',
    'dreamweaver',
    'eclipse',
    'github',
    'gob',
    'gruvbox',
    'idle_fingers',
    'iplastic',
    'katzenmilch',
    'kr_theme',
    'kuroir',
    'merbivore',
    'merbivore_soft',
    'mono_industrial',
    'monokai',
    'pastel_on_dark',
    'solarized_dark',
    'solarized_light',
    'sqlserver',
    'terminal',
    'textmate',
    'tomorrow',
    'tomorrow_night',
    'tomorrow_night_blue',
    'tomorrow_night_bright',
    'tomorrow_night_eighties',
    'twilight',
    'vibrant_ink',
    'xcode',
  ],
};

/*
Ace.bootstrap = {
  modes: {imported: Ace.config.$modes, info: []},
  themes: {imported: {}, info: []},
};


Ace.bootstrap.modes.get = (mode) => {
  return Ace.bootstrap.modes.imported[`ace/mode/${mode}`];
};
Ace.bootstrap.modes.has = (mode) => {
  return Ace.bootstrap.modes.imported.hasOwnProperty(`ace/mode/${mode}`);
};
Ace.bootstrap.modes.set = (mode, Mode) => {
  return Ace.bootstrap.modes.imported[`ace/mode/${mode}`] = new Mode();
};
Ace.loadMode = async (editor, mode) => {
  if (Ace.bootstrap.modes.has(mode)) {
    editor.session.setMode(Ace.bootstrap.modes.get(mode));
  } else {
    if (AceModeLoader.has(mode)) {
      Ace.bootstrap.modes.set(mode, (await AceModeLoader.load(mode)).Mode);
      return await Ace.loadMode(editor, mode);
    }
  }
};

const AceModeLoader = Object.freeze({
  has(mode) {
    return this.modes.hasOwnProperty(mode);
  },
  async load(mode) {
    if (this.has(mode)) {
      return await this.modes[mode]();
    }
  },
  modes: {
    'abap': async () => await import('ace-builds/src-noconflict/mode-abap'),
    'abc': async () => await import('ace-builds/src-noconflict/mode-abc'),
    'actionscript': async () => await import('ace-builds/src-noconflict/mode-actionscript'),
    'ada': async () => await import('ace-builds/src-noconflict/mode-ada'),
    'apache_conf': async () => await import('ace-builds/src-noconflict/mode-apache_conf'),
    'apex': async () => await import('ace-builds/src-noconflict/mode-apex'),
    'applescript': async () => await import('ace-builds/src-noconflict/mode-applescript'),
    'asciidoc': async () => await import('ace-builds/src-noconflict/mode-asciidoc'),
    'asl': async () => await import('ace-builds/src-noconflict/mode-asl'),
    'assembly_x86': async () => await import('ace-builds/src-noconflict/mode-assembly_x86'),
    'autohotkey': async () => await import('ace-builds/src-noconflict/mode-autohotkey'),
    'batchfile': async () => await import('ace-builds/src-noconflict/mode-batchfile'),
    'bro': async () => await import('ace-builds/src-noconflict/mode-bro'),
    'c9search': async () => await import('ace-builds/src-noconflict/mode-c9search'),
    'c_cpp': async () => await import('ace-builds/src-noconflict/mode-c_cpp'),
    'cirru': async () => await import('ace-builds/src-noconflict/mode-cirru'),
    'clojure': async () => await import('ace-builds/src-noconflict/mode-clojure'),
    'cobol': async () => await import('ace-builds/src-noconflict/mode-cobol'),
    'coffee': async () => await import('ace-builds/src-noconflict/mode-coffee'),
    'coldfusion': async () => await import('ace-builds/src-noconflict/mode-coldfusion'),
    'csharp': async () => await import('ace-builds/src-noconflict/mode-csharp'),
    'csound_document': async () => await import('ace-builds/src-noconflict/mode-csound_document'),
    'csound_orchestra': async () => await import('ace-builds/src-noconflict/mode-csound_orchestra'),
    'csound_score': async () => await import('ace-builds/src-noconflict/mode-csound_score'),
    'csp': async () => await import('ace-builds/src-noconflict/mode-csp'),
    'css': async () => await import('ace-builds/src-noconflict/mode-css'),
    'curly': async () => await import('ace-builds/src-noconflict/mode-curly'),
    'd': async () => await import('ace-builds/src-noconflict/mode-d'),
    'dart': async () => await import('ace-builds/src-noconflict/mode-dart'),
    'diff': async () => await import('ace-builds/src-noconflict/mode-diff'),
    'django': async () => await import('ace-builds/src-noconflict/mode-django'),
    'dockerfile': async () => await import('ace-builds/src-noconflict/mode-dockerfile'),
    'dot': async () => await import('ace-builds/src-noconflict/mode-dot'),
    'drools': async () => await import('ace-builds/src-noconflict/mode-drools'),
    'edifact': async () => await import('ace-builds/src-noconflict/mode-edifact'),
    'eiffel': async () => await import('ace-builds/src-noconflict/mode-eiffel'),
    'ejs': async () => await import('ace-builds/src-noconflict/mode-ejs'),
    'elixir': async () => await import('ace-builds/src-noconflict/mode-elixir'),
    'elm': async () => await import('ace-builds/src-noconflict/mode-elm'),
    'erlang': async () => await import('ace-builds/src-noconflict/mode-erlang'),
    'forth': async () => await import('ace-builds/src-noconflict/mode-forth'),
    'fortran': async () => await import('ace-builds/src-noconflict/mode-fortran'),
    'fsharp': async () => await import('ace-builds/src-noconflict/mode-fsharp'),
    'fsl': async () => await import('ace-builds/src-noconflict/mode-fsl'),
    'ftl': async () => await import('ace-builds/src-noconflict/mode-ftl'),
    'gcode': async () => await import('ace-builds/src-noconflict/mode-gcode'),
    'gherkin': async () => await import('ace-builds/src-noconflict/mode-gherkin'),
    'gitignore': async () => await import('ace-builds/src-noconflict/mode-gitignore'),
    'glsl': async () => await import('ace-builds/src-noconflict/mode-glsl'),
    'gobstones': async () => await import('ace-builds/src-noconflict/mode-gobstones'),
    'golang': async () => await import('ace-builds/src-noconflict/mode-golang'),
    'graphqlschema': async () => await import('ace-builds/src-noconflict/mode-graphqlschema'),
    'groovy': async () => await import('ace-builds/src-noconflict/mode-groovy'),
    'haml': async () => await import('ace-builds/src-noconflict/mode-haml'),
    'handlebars': async () => await import('ace-builds/src-noconflict/mode-handlebars'),
    'haskell': async () => await import('ace-builds/src-noconflict/mode-haskell'),
    'haskell_cabal': async () => await import('ace-builds/src-noconflict/mode-haskell_cabal'),
    'haxe': async () => await import('ace-builds/src-noconflict/mode-haxe'),
    'hjson': async () => await import('ace-builds/src-noconflict/mode-hjson'),
    'html': async () => await import('ace-builds/src-noconflict/mode-html'),
    'html_elixir': async () => await import('ace-builds/src-noconflict/mode-html_elixir'),
    'html_ruby': async () => await import('ace-builds/src-noconflict/mode-html_ruby'),
    'ini': async () => await import('ace-builds/src-noconflict/mode-ini'),
    'io': async () => await import('ace-builds/src-noconflict/mode-io'),
    'jack': async () => await import('ace-builds/src-noconflict/mode-jack'),
    'jade': async () => await import('ace-builds/src-noconflict/mode-jade'),
    'java': async () => await import('ace-builds/src-noconflict/mode-java'),
    'javascript': async () => await import('ace-builds/src-noconflict/mode-javascript'),
    'json': async () => await import('ace-builds/src-noconflict/mode-json'),
    'jsoniq': async () => await import('ace-builds/src-noconflict/mode-jsoniq'),
    'jsp': async () => await import('ace-builds/src-noconflict/mode-jsp'),
    'jssm': async () => await import('ace-builds/src-noconflict/mode-jssm'),
    'jsx': async () => await import('ace-builds/src-noconflict/mode-jsx'),
    'julia': async () => await import('ace-builds/src-noconflict/mode-julia'),
    'kotlin': async () => await import('ace-builds/src-noconflict/mode-kotlin'),
    'latex': async () => await import('ace-builds/src-noconflict/mode-latex'),
    'less': async () => await import('ace-builds/src-noconflict/mode-less'),
    'liquid': async () => await import('ace-builds/src-noconflict/mode-liquid'),
    'lisp': async () => await import('ace-builds/src-noconflict/mode-lisp'),
    'livescript': async () => await import('ace-builds/src-noconflict/mode-livescript'),
    'logiql': async () => await import('ace-builds/src-noconflict/mode-logiql'),
    'logtalk': async () => await import('ace-builds/src-noconflict/mode-logtalk'),
    'lsl': async () => await import('ace-builds/src-noconflict/mode-lsl'),
    'lua': async () => await import('ace-builds/src-noconflict/mode-lua'),
    'luapage': async () => await import('ace-builds/src-noconflict/mode-luapage'),
    'lucene': async () => await import('ace-builds/src-noconflict/mode-lucene'),
    'makefile': async () => await import('ace-builds/src-noconflict/mode-makefile'),
    'markdown': async () => await import('ace-builds/src-noconflict/mode-markdown'),
    'mask': async () => await import('ace-builds/src-noconflict/mode-mask'),
    'matlab': async () => await import('ace-builds/src-noconflict/mode-matlab'),
    'maze': async () => await import('ace-builds/src-noconflict/mode-maze'),
    'mel': async () => await import('ace-builds/src-noconflict/mode-mel'),
    'mixal': async () => await import('ace-builds/src-noconflict/mode-mixal'),
    'mushcode': async () => await import('ace-builds/src-noconflict/mode-mushcode'),
    'mysql': async () => await import('ace-builds/src-noconflict/mode-mysql'),
    'nix': async () => await import('ace-builds/src-noconflict/mode-nix'),
    'nsis': async () => await import('ace-builds/src-noconflict/mode-nsis'),
    'objectivec': async () => await import('ace-builds/src-noconflict/mode-objectivec'),
    'ocaml': async () => await import('ace-builds/src-noconflict/mode-ocaml'),
    'pascal': async () => await import('ace-builds/src-noconflict/mode-pascal'),
    'perl': async () => await import('ace-builds/src-noconflict/mode-perl'),
    'perl6': async () => await import('ace-builds/src-noconflict/mode-perl6'),
    'pgsql': async () => await import('ace-builds/src-noconflict/mode-pgsql'),
    'php': async () => await import('ace-builds/src-noconflict/mode-php'),
    'php_laravel_blade': async () => await import('ace-builds/src-noconflict/mode-php_laravel_blade'),
    'pig': async () => await import('ace-builds/src-noconflict/mode-pig'),
    'plain_text': async () => await import('ace-builds/src-noconflict/mode-plain_text'),
    'powershell': async () => await import('ace-builds/src-noconflict/mode-powershell'),
    'praat': async () => await import('ace-builds/src-noconflict/mode-praat'),
    'prolog': async () => await import('ace-builds/src-noconflict/mode-prolog'),
    'properties': async () => await import('ace-builds/src-noconflict/mode-properties'),
    'protobuf': async () => await import('ace-builds/src-noconflict/mode-protobuf'),
    'puppet': async () => await import('ace-builds/src-noconflict/mode-puppet'),
    'python': async () => await import('ace-builds/src-noconflict/mode-python'),
    'r': async () => await import('ace-builds/src-noconflict/mode-r'),
    'razor': async () => await import('ace-builds/src-noconflict/mode-razor'),
    'rdoc': async () => await import('ace-builds/src-noconflict/mode-rdoc'),
    'red': async () => await import('ace-builds/src-noconflict/mode-red'),
    'redshift': async () => await import('ace-builds/src-noconflict/mode-redshift'),
    'rhtml': async () => await import('ace-builds/src-noconflict/mode-rhtml'),
    'rst': async () => await import('ace-builds/src-noconflict/mode-rst'),
    'ruby': async () => await import('ace-builds/src-noconflict/mode-ruby'),
    'rust': async () => await import('ace-builds/src-noconflict/mode-rust'),
    'sass': async () => await import('ace-builds/src-noconflict/mode-sass'),
    'scad': async () => await import('ace-builds/src-noconflict/mode-scad'),
    'scala': async () => await import('ace-builds/src-noconflict/mode-scala'),
    'scheme': async () => await import('ace-builds/src-noconflict/mode-scheme'),
    'scss': async () => await import('ace-builds/src-noconflict/mode-scss'),
    'sh': async () => await import('ace-builds/src-noconflict/mode-sh'),
    'sjs': async () => await import('ace-builds/src-noconflict/mode-sjs'),
    'slim': async () => await import('ace-builds/src-noconflict/mode-slim'),
    'smarty': async () => await import('ace-builds/src-noconflict/mode-smarty'),
    'snippets': async () => await import('ace-builds/src-noconflict/mode-snippets'),
    'soy_template': async () => await import('ace-builds/src-noconflict/mode-soy_template'),
    'space': async () => await import('ace-builds/src-noconflict/mode-space'),
    'sparql': async () => await import('ace-builds/src-noconflict/mode-sparql'),
    'sql': async () => await import('ace-builds/src-noconflict/mode-sql'),
    'sqlserver': async () => await import('ace-builds/src-noconflict/mode-sqlserver'),
    'stylus': async () => await import('ace-builds/src-noconflict/mode-stylus'),
    'svg': async () => await import('ace-builds/src-noconflict/mode-svg'),
    'swift': async () => await import('ace-builds/src-noconflict/mode-swift'),
    'tcl': async () => await import('ace-builds/src-noconflict/mode-tcl'),
    'terraform': async () => await import('ace-builds/src-noconflict/mode-terraform'),
    'tex': async () => await import('ace-builds/src-noconflict/mode-tex'),
    'text': async () => await import('ace-builds/src-noconflict/mode-text'),
    'textile': async () => await import('ace-builds/src-noconflict/mode-textile'),
    'toml': async () => await import('ace-builds/src-noconflict/mode-toml'),
    'tsx': async () => await import('ace-builds/src-noconflict/mode-tsx'),
    'turtle': async () => await import('ace-builds/src-noconflict/mode-turtle'),
    'twig': async () => await import('ace-builds/src-noconflict/mode-twig'),
    'typescript': async () => await import('ace-builds/src-noconflict/mode-typescript'),
    'vala': async () => await import('ace-builds/src-noconflict/mode-vala'),
    'vbscript': async () => await import('ace-builds/src-noconflict/mode-vbscript'),
    'velocity': async () => await import('ace-builds/src-noconflict/mode-velocity'),
    'verilog': async () => await import('ace-builds/src-noconflict/mode-verilog'),
    'vhdl': async () => await import('ace-builds/src-noconflict/mode-vhdl'),
    'visualforce': async () => await import('ace-builds/src-noconflict/mode-visualforce'),
    'wollok': async () => await import('ace-builds/src-noconflict/mode-wollok'),
    'xml': async () => await import('ace-builds/src-noconflict/mode-xml'),
    'xquery': async () => await import('ace-builds/src-noconflict/mode-xquery'),
    'yaml': async () => await import('ace-builds/src-noconflict/mode-yaml'),
  },
});
Ace.bootstrap.modes.info = Object.keys(AceModeLoader.modes);



Ace.bootstrap.themes.get = (theme) => {
  return Ace.bootstrap.themes.imported[theme];
};
Ace.bootstrap.themes.has = (theme) => {
  return Ace.bootstrap.themes.imported.hasOwnProperty(theme);
};
Ace.loadTheme = async (editor, theme) => {
  if (Ace.bootstrap.themes.has(theme)) {
    editor.setTheme(Ace.bootstrap.themes.get(theme));
  } else {
    if (AceThemeLoader.has(theme)) {
      const themeModule = await AceThemeLoader.load(theme);
      Ace.bootstrap.themes.imported[theme] = themeModule;
      editor.setTheme(themeModule);
    }
  }
};

const AceThemeLoader = Object.freeze({
  has(theme) {
    return this.themes.hasOwnProperty(theme);
  },
  async load(theme) {
    if (this.has(theme)) {
      return await this.themes[theme]();
    }
  },
  themes: {
    'ambiance': async () => await import('ace-builds/src-noconflict/theme-ambiance'),
    'chaos': async () => await import('ace-builds/src-noconflict/theme-chaos'),
    'chrome': async () => await import('ace-builds/src-noconflict/theme-chrome'),
    'clouds': async () => await import('ace-builds/src-noconflict/theme-clouds'),
    'clouds_midnight': async () => await import('ace-builds/src-noconflict/theme-clouds_midnight'),
    'cobalt': async () => await import('ace-builds/src-noconflict/theme-cobalt'),
    'crimson_editor': async () => await import('ace-builds/src-noconflict/theme-crimson_editor'),
    'dawn': async () => await import('ace-builds/src-noconflict/theme-dawn'),
    'dracula': async () => await import('ace-builds/src-noconflict/theme-dracula'),
    'dreamweaver': async () => await import('ace-builds/src-noconflict/theme-dreamweaver'),
    'eclipse': async () => await import('ace-builds/src-noconflict/theme-eclipse'),
    'github': async () => await import('ace-builds/src-noconflict/theme-github'),
    'gob': async () => await import('ace-builds/src-noconflict/theme-gob'),
    'gruvbox': async () => await import('ace-builds/src-noconflict/theme-gruvbox'),
    'idle_fingers': async () => await import('ace-builds/src-noconflict/theme-idle_fingers'),
    'iplastic': async () => await import('ace-builds/src-noconflict/theme-iplastic'),
    'katzenmilch': async () => await import('ace-builds/src-noconflict/theme-katzenmilch'),
    'kr_theme': async () => await import('ace-builds/src-noconflict/theme-kr_theme'),
    'kuroir': async () => await import('ace-builds/src-noconflict/theme-kuroir'),
    'merbivore': async () => await import('ace-builds/src-noconflict/theme-merbivore'),
    'merbivore_soft': async () => await import('ace-builds/src-noconflict/theme-merbivore_soft'),
    'mono_industrial': async () => await import('ace-builds/src-noconflict/theme-mono_industrial'),
    'monokai': async () => await import('ace-builds/src-noconflict/theme-monokai'),
    'pastel_on_dark': async () => await import('ace-builds/src-noconflict/theme-pastel_on_dark'),
    'solarized_dark': async () => await import('ace-builds/src-noconflict/theme-solarized_dark'),
    'solarized_light': async () => await import('ace-builds/src-noconflict/theme-solarized_light'),
    'sqlserver': async () => await import('ace-builds/src-noconflict/theme-sqlserver'),
    'terminal': async () => await import('ace-builds/src-noconflict/theme-terminal'),
    'textmate': async () => await import('ace-builds/src-noconflict/theme-textmate'),
    'tomorrow': async () => await import('ace-builds/src-noconflict/theme-tomorrow'),
    'tomorrow_night': async () => await import('ace-builds/src-noconflict/theme-tomorrow_night'),
    'tomorrow_night_blue': async () => await import('ace-builds/src-noconflict/theme-tomorrow_night_blue'),
    'tomorrow_night_bright': async () => await import('ace-builds/src-noconflict/theme-tomorrow_night_bright'),
    'tomorrow_night_eighties': async () => await import('ace-builds/src-noconflict/theme-tomorrow_night_eighties'),
    'twilight': async () => await import('ace-builds/src-noconflict/theme-twilight'),
    'vibrant_ink': async () => await import('ace-builds/src-noconflict/theme-vibrant_ink'),
    'xcode': async () => await import('ace-builds/src-noconflict/theme-xcode'),
  },
});
Ace.bootstrap.themes.info = Object.keys(AceThemeLoader.themes);

console.log(Ace);
*/

export default Ace;
